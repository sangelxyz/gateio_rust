use std::{fmt::Display, str::FromStr};

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use serde_tuple::Deserialize_tuple;
use serde_with::{serde_as, DisplayFromStr, TimestampSeconds};

// mod utils {
//     pub mod gateio;
//     pub mod lib;
//     pub mod serde;
// }
// Struts

#[serde_as]
#[derive(Debug, PartialEq, Deserialize_tuple)]
pub struct Candles {
    // This supports timestamp types from a few different crates (including std),
    // depending on what you might need, here. See:
    // https://docs.rs/serde_with/3.0.0/serde_with/struct.TimestampSeconds.html
    #[serde_as(as = "TimestampSeconds<String>")]
    pub time: DateTime<Utc>,

    #[serde_as(as = "DisplayFromStr")]
    pub open: f64,

    #[serde_as(as = "DisplayFromStr")]
    pub high: f64,

    #[serde_as(as = "DisplayFromStr")]
    pub low: f64,

    #[serde_as(as = "DisplayFromStr")]
    pub close: f64,

    // TODO: It looks like the API returns these as integers, not floats.
    //       Maybe change this to u32 or u64?
    #[serde_as(as = "DisplayFromStr")]
    pub volume: f64,

    #[serde_as(as = "DisplayFromStr")]
    pub volumes: f64,
}

// #[allow(non_snake_case)]
// #[derive(Deserialize, Serialize, Debug)]
// pub struct CurrencyPairs {
//     pub id: String,
//     pub base: String,
//     pub quote: String,
//     pub fee: f64,
//     pub min_base_amount: f64,
//     pub min_quote_amount: f64,
//     pub amount_precision: u8,
//     pub precision: u8,
//     pub trade_status: String,
//     pub sell_start: u32,
//     pub buy_start: u32,
// }

#[allow(non_snake_case)]
#[derive(Deserialize, Serialize, Debug)]
pub struct Products {
    pub currency: String,
    pub delisted: String,
    pub withdraw_disabled: bool,
    pub withdraw_delayed: bool,
    pub deposit_disabled: bool,
    pub trade_disabled: bool,
    pub chain: String,
}

fn string_as_parsable<T>(item: &Value) -> T
where
    T: Default + FromStr,
    T::Err: Display,
{
    item.as_str()
        .map(|t| t.parse())
        .transpose()
        .unwrap_or_else(|err| {
            println!(
                "Failed to parse string as {}: {}",
                std::any::type_name::<T>(),
                err
            );
            None
        })
        .unwrap_or_default()
}

// Serde Value as u32 output.
pub fn as_u32(item: &Value) -> u32 {
    string_as_parsable(item)
}

// Serde Value as bool.
pub fn as_bool(item: &Value) -> bool {
    string_as_parsable(item)
}

// Serde Value as String.
pub fn as_string(item: Value) -> String {
    match item {
        Value::String(contents) => contents,
        _ => String::default(),
    }
}

pub fn as_f64(item: &Value) -> f64 {
    string_as_parsable(item)
}

#[cfg(test)]
mod test {
    use std::time::{Duration, UNIX_EPOCH};

    use pretty_assertions::assert_eq;

    use super::*;

    const API_RESPONSE_CANDLESTICKS: &str = r#"[["1684926000","1134688.58995405922","26693.7","26763.1","26688.1","26727","42.4660720773"],["1684927800","819997.29655484637","26739.9","26742.6","26686.3","26693.6","30.6891078313"],["1684929600","1087091.05834972258","26718.6","26739.9","26677.8","26739.9","40.7026290877"],["1684931400","1157060.23394496","26694.7","26724.1","26666","26718.6","43.33198182"],["1684933200","726998.74892148196","26683.1","26711.9","26667.1","26694.7","27.2461891617"],["1684935000","11344656.58497477266","26443.7","26686.5","26272.7","26683.1","429.1882261942"],["1684936800","8051604.80391574536","26300.1","26441.8","26150","26441.7","306.1541004464"],["1684938600","3507822.3337486886","26258.8","26384.4","26228.7","26300.1","133.3028399305"],["1684940400","10643718.78605875162","26321.9","26333.4","26080","26258","406.340583623"],["1684942200","2260179.97586887128","26312.3","26371.5","26261.7","26322","85.8627282894"],["1684944000","2450760.51393022356","26210.2","26327","26186.6","26313.9","93.4056207793"],["1684945800","1193528.185642577","26233.5","26236","26159","26210.2","45.55718418"],["1684947600","2357964.71838689907","26269.5","26296.5","26168.1","26237.8","89.9002585683"],["1684949400","1927764.08559409652","26279.4","26352.9","26259.9","26269.5","73.2659310268"],["1684951200","1673944.69939664048","26237.5","26324.3","26228.7","26279.4","63.7071422181"],["1684953000","1028916.14143796803","26220.7","26284.6","26214.2","26237.6","39.1870279121"],["1684954800","1836803.88621753164","26315.5","26346.9","26206.7","26220.7","69.8815601458"],["1684956600","2587603.88080612462","26250.1","26397.4","26235.2","26315.6","98.3741661834"],["1684958400","2500732.15041012619","26416","26417.7","26241.7","26252","94.9721202966"],["1684960200","4128569.75747558451","26404.5","26483.8","26326.3","26418.2","156.3203920439"],["1684962000","1218346.38804178691","26402.5","26461","26378.9","26404.5","46.1106518009"],["1684963800","1348908.41522186953","26366","26408.3","26313.1","26402.5","51.1834844297"],["1684965600","772530.33800951731","26341.5","26404.5","26341.5","26366","29.2916942348"],["1684967400","1212571.34779635694","26348.7","26371","26314.5","26339.6","46.0284860926"],["1684969200","405333.81324231827","26324.6","26388","26317.8","26348.7","15.3808008371"],["1684971000","310749.88905287612","26330","26366.2","26324.6","26324.6","11.7931215289"],["1684972800","1500561.07508403473","26283.1","26388","26269.6","26328.7","56.9983065129"],["1684974600","2000426.9158566546","26235.6","26290.7","26197.7","26283.1","76.2372576368"],["1684976400","7019570.64993504385","25967.3","26313.5","25872.1","26235.6","269.4925310196"],["1684978200","4116899.34161243203","26119.8","26148.3","25954.2","25967.4","157.9387577289"],["1684980000","1112494.071363404","26090","26144.5","26083","26123.3","42.601109505"],["1684981800","989494.61341549278","26119.3","26124.7","26053.3","26090","37.9230395628"],["1684983600","1866166.8648889631","26197.4","26218.8","26121","26121","71.3213957288"],["1684985400","861488.76152641762","26184.3","26213.9","26168.7","26194.9","32.8908172378"],["1684987200","1469030.80508325031","26208.7","26251.9","26150.4","26184.3","56.0713722964"],["1684989000","975776.59261962466","26223.8","26261.7","26203.5","26207.5","37.2071377522"],["1684990800","454692.74058723022","26269.8","26271.7","26215.5","26223.8","17.3254126919"],["1684992600","1243926.33413048282","26258.2","26271.8","26225.7","26269.8","47.3860008499"],["1684994400","1310488.34225502122","26255.8","26291.8","26240","26258.3","49.8906185107"],["1684996200","966358.27106269648","26260.8","26289.7","26222.9","26255.8","36.8009494758"],["1684998000","1787320.34026875517","26200.2","26264.7","26184.3","26260.9","68.1520750113"],["1684999800","1737061.10945849365","26132.5","26200.2","26130.6","26200.2","66.4064320691"],["1685001600","1487478.06072766457","26215.9","26215.9","26128.8","26132.5","56.8116922778"],["1685003400","1171782.95430599152","26224.2","26248.8","26213.8","26215.9","44.6737385139"],["1685005200","674428.4754773242","26239.5","26250.5","26223.5","26224.2","25.7052000058"],["1685007000","886980.02227899814","26277.8","26277.9","26238.3","26239.5","33.7763289009"],["1685008800","859266.14232443081","26262","26298.4","26241.7","26277.9","32.7097222254"],["1685010600","801113.78661521564","26246.7","26278","26219","26263.2","30.5269718262"],["1685012400","448277.7151149685","26216.9","26260.6","26216.9","26248.3","17.0805707409"],["1685014200","1611919.83449956948","26293.4","26331.9","26209","26216.4","61.3853542051"],["1685016000","5412135.16622441126","26411.9","26490","26293.4","26293.4","204.9760134193"],["1685017800","3809083.30967258239","26405.5","26456.3","26359.9","26413.4","144.2640124504"],["1685019600","1228404.47372394069","26402","26430.8","26366.1","26403.1","46.5140668863"],["1685021400","4200912.53994614918","26340.2","26412.5","26273.4","26401.9","159.5153614734"],["1685023200","3228483.21759657132","26384.3","26400.6","26290.8","26340.2","122.5145262319"],["1685025000","1734939.78394730677","26362","26422.6","26348.5","26384.4","65.7597495977"],["1685026800","2075497.35099116613","26270.1","26390","26268.7","26362","78.838480476"],["1685028600","3620938.34753983444","26226.2","26281.2","26171.8","26268","138.0828587844"],["1685030400","2176768.77978655075","26249.9","26319.5","26211","26226.1","82.9127358261"],["1685032200","1249982.43377408278","26275.3","26292.3","26230.4","26249.9","47.5938896284"],["1685034000","1355218.49992651249","26319.4","26327.9","26252","26275.3","51.5554519124"],["1685035800","2543210.57885041192","26349.6","26389.9","26319.5","26319.5","96.4938574801"],["1685037600","2347732.57559359066","26400","26409","26330.8","26351","89.0177309758"],["1685039400","1441539.59169705976","26372.4","26400.1","26346","26400.1","54.6692855728"],["1685041200","4911513.04901058339","26502.6","26625.5","26368.6","26374.4","185.2011135481"],["1685043000","2110583.836806088","26469","26502.6","26421.3","26502.6","79.750409995"],["1685044800","1295036.82850074206","26483.6","26518.6","26460","26467.5","48.8910567286"],["1685046600","495881.5017556436","26485.3","26497.8","26461.1","26483.5","18.7243480148"],["1685048400","584743.42662877419","26452.8","26485.3","26441.2","26485.3","22.1019944569"],["1685050200","352528.3927079562","26473.5","26473.5","26443.2","26452.8","13.3245224805"],["1685052000","529089.8435306826","26460.4","26475.5","26444.7","26473.4","19.9948005378"],["1685053800","242993.98396074698","26456","26464.1","26436.2","26460.5","9.1877644347"],["1685055600","1312328.05705081318","26497.4","26548","26453.6","26456","49.5230655572"],["1685057400","487308.75030673385","26475","26497.4","26467.4","26497.4","18.4063298525"],["1685059200","507750.7482109019","26487.9","26495.5","26441.1","26475","19.1850196135"],["1685061000","3719524.57781358475","26468.5","26510.1","26392.6","26488","140.6288839355"],["1685062800","2440922.85524836604","26429.5","26534.9","26415.8","26470.6","92.2109176114"],["1685064600","1942783.33240641688","26417.3","26471.9","26351.2","26431.4","73.5805362106"],["1685066400","639651.97738401472","26416.2","26441.1","26386.8","26415.8","24.214598112"],["1685068200","348133.2670058525","26406.1","26433.9","26406","26416.2","13.1762665"],["1685070000","441026.39509714183","26420.4","26433.5","26394.4","26406.1","16.7008632627"],["1685071800","596774.36312829018","26436.4","26464.3","26420.4","26420.4","22.5698083292"],["1685073600","238137.26301806811","26426.2","26451.8","26425.7","26436.5","9.0081846478"],["1685075400","274835.744862463","26433.1","26434.7","26417.6","26426.1","10.4006369"],["1685077200","893893.93717185353","26380.3","26434.6","26367.7","26433.1","33.8421583263"],["1685079000","813626.596466268","26352.9","26394.4","26343.4","26380.3","30.853619435"],["1685080800","880361.922356366","26390.5","26397.1","26333.6","26353","33.3958944905"],["1685082600","937418.9700776885","26429.9","26442.8","26371.4","26390.4","35.503311685"],["1685084400","693075.66210488595","26439.5","26474.8","26415.4","26431","26.2113344621"],["1685086200","1096811.932973774","26503.4","26529.8","26439.5","26439.6","41.406182785"],["1685088000","803837.28011364101","26511.5","26527.1","26492.9","26503.5","30.3228938909"],["1685089800","1650084.2710671535","26473.4","26545.3","26471.3","26511.4","62.272139345"],["1685091600","1126946.76860021918","26435.1","26474","26431","26473.4","42.5959598592"],["1685093400","506713.381495286","26447.5","26461","26432.9","26435.1","19.156857235"],["1685095200","400148.57851066625","26450.2","26456.7","26424.8","26447.5","15.1348797561"],["1685097000","301437.90499510968","26453","26487","26447.7","26450.3","11.3900201042"],["1685098800","635113.422548362","26449.9","26460","26432.4","26453","24.010663525"],["1685100600","885251.37889316742","26464.6","26500","26431","26449.8","33.4368579623"],["1685102400","486327.488882221","26456.9","26477.6","26456.8","26464.6","18.37184036"],["1685104200","2527400.300619038","26451","26530","26360.1","26456.8","95.68975871"]]"#;

    #[test]
    fn deserialize_candles() {
        let candles: Vec<Candles> =
            serde_json::from_str(API_RESPONSE_CANDLESTICKS).expect("Failed to deserialize");

        // Grab one and make sure it looks right.
        assert_eq!(
            Candles {
                time: UNIX_EPOCH
                    .checked_add(Duration::from_secs(1684926000))
                    .unwrap()
                    .into(),
                // TODO: Pay attention to the clippy warning, here. The API is returning more
                //       precision than f64 can handle.
                open: 1134688.58995405922,
                high: 26693.7,
                low: 26763.1,
                close: 26688.1,
                volume: 26727.,
                volumes: 42.4660720773,
            },
            candles[0],
            "Did not deserialize as expected"
        );

        println!("{candles:#?}");
    }
}
